<#
.SYNOPSIS
    PowerShell script to get and verify file hashes.

.DESCRIPTION
    This script has two modes: getHashes and verifyHashes. In getHashes mode, the script accepts a root folder as a parameter, fetches MD5 hashes of all files within that folder (recursively), and dumps the information in an output file. In verifyHashes mode, the script accepts two files generated by the getHashes mode and provides a report of all files that have matching hashes, different hashes, and files that are missing on either side.

.PARAMETER getHashes
    Switch to enable getHashes mode.

.PARAMETER verifyHashes
    Switch to enable verifyHashes mode.

.PARAMETER rootFolder
    The root folder to fetch file hashes from (only available in getHashes mode).

.PARAMETER outputFile
    The file where hash results will be saved (only available in getHashes mode).

.PARAMETER file1
    The first file to compare (only available in verifyHashes mode).

.PARAMETER file2
    The second file to compare (only available in verifyHashes mode).

.EXAMPLE
    .\check-fileIntegrity.ps1 -getHashes -rootFolder "C:\SourceFolder" -outputFile "C:\hashes1.csv"

.EXAMPLE
    .\check-fileIntegrity.ps1 -verifyHashes -file1 "C:\hashes1.csv" -file2 "C:\hashes2.csv"
#>

param (
    [Parameter(Mandatory = $true, ParameterSetName = "getHashes")]
    [switch]$getHashes,
    
    [Parameter(Mandatory = $true, ParameterSetName = "getHashes")]
    [string]$rootFolder,
    
    [Parameter(Mandatory = $true, ParameterSetName = "getHashes")]
    [string]$outputFile,
    
    [Parameter(Mandatory = $true, ParameterSetName = "verifyHashes")]
    [switch]$verifyHashes,
    
    [Parameter(Mandatory = $true, ParameterSetName = "verifyHashes")]
    [string]$file1,
    
    [Parameter(Mandatory = $true, ParameterSetName = "verifyHashes")]
    [string]$file2
)

# Function to compute MD5 hash of a file
function Get-FileHashMD5 {
    param ([string]$filePath)
    
    $md5 = New-Object -TypeName System.Security.Cryptography.MD5CryptoServiceProvider
    $stream = [System.IO.File]::OpenRead($filePath)
    $hashBytes = $md5.ComputeHash($stream)
    $stream.Close()
    
    return [BitConverter]::ToString($hashBytes) -replace "-", ""
}

# Get hashes of all files in the specified root folder
if ($getHashes) {
    if (-not (Test-Path -Path $rootFolder -PathType Container)) {
        Write-Host "Root folder does not exist!" -ForegroundColor Red
        exit 1
    }
    
    $hashData = @()
    $files = Get-ChildItem -Path $rootFolder -Recurse -File
    
    foreach ($file in $files) {
        $relativePath = $file.FullName.Substring($rootFolder.Length).TrimStart("\/ ")
        $hash = Get-FileHashMD5 -filePath $file.FullName
        $hashData += [PSCustomObject]@{
            FilePath = $relativePath
            Hash = $hash
        }
    }
    
    $hashData | Export-Csv -Path $outputFile -NoTypeInformation
    Write-Host "Hashes saved to $outputFile" -ForegroundColor Green
}

# Verify hashes by comparing two files
if ($verifyHashes) {
    if (-not (Test-Path -Path $file1) -or -not (Test-Path -Path $file2)) {
        Write-Host "One or both hash files do not exist!" -ForegroundColor Red
        exit 1
    }
    
    $hashes1 = Import-Csv -Path $file1
    $hashes2 = Import-Csv -Path $file2
    
    Write-Host "Loaded hashes from file1: $($hashes1.Count) entries" -ForegroundColor Yellow
    Write-Host "Loaded hashes from file2: $($hashes2.Count) entries" -ForegroundColor Yellow
    
    $matches = @()
    $differences = @()
    $missingInFile1 = @()
    $missingInFile2 = @()
    
    $allKeys = @()
    $allKeys += $hashes1.FilePath | ForEach-Object { $_.ToLower() }
    $allKeys += $hashes2.FilePath | ForEach-Object { $_.ToLower() }
    $allKeys = $allKeys | Select-Object -Unique
    
    foreach ($key in $allKeys) {
        $hash1 = $hashes1 | Where-Object { $_.FilePath -eq $key }
        $hash2 = $hashes2 | Where-Object { $_.FilePath -eq $key }
        
        if ($hash1 -and $hash2) {
            if ($hash1.Hash -eq $hash2.Hash) {
                $matches += $key
            } else {
                $differences += [PSCustomObject]@{
                    FilePath = $key
                    Hash1 = $hash1.Hash
                    Hash2 = $hash2.Hash
                }
            }
        } elseif ($hash1) {
            $missingInFile2 += [PSCustomObject]@{
                FilePath = $key
                Hash = $hash1.Hash
            }
        } else {
            $missingInFile1 += [PSCustomObject]@{
                FilePath = $key
                Hash = $hash2.Hash
            }
        }
    }
    
    Write-Host "Matches found: $($matches.Count)" -ForegroundColor Green
    Write-Host "Differences found: $($differences.Count)" -ForegroundColor Red
    Write-Host "Missing in file1: $($missingInFile1.Count)" -ForegroundColor Red
    Write-Host "Missing in file2: $($missingInFile2.Count)" -ForegroundColor Red
    
    $report = @()
    foreach ($match in $matches) {
        $report += [PSCustomObject]@{
            Status = "Match"
            FilePath = $match
        }
    }
    foreach ($difference in $differences) {
        $report += [PSCustomObject]@{
            Status = "Difference"
            FilePath = $difference.FilePath
            Hash1 = $difference.Hash1
            Hash2 = $difference.Hash2
        }
    }
    foreach ($missing in $missingInFile1) {
        $report += [PSCustomObject]@{
            Status = "Missing in file1"
            FilePath = $missing.FilePath
            Hash = $missing.Hash
        }
    }
    foreach ($missing in $missingInFile2) {
        $report += [PSCustomObject]@{
            Status = "Missing in file2"
            FilePath = $missing.FilePath
            Hash = $missing.Hash
        }
    }
    
    $reportFile = "hash_comparison_report.csv"
    $report | Export-Csv -Path $reportFile -NoTypeInformation
    Write-Host "Overall comparison report saved to $reportFile" -ForegroundColor Green
    
    $differencesFile = "hash_comparison_report_differences.csv"
    $differences | Export-Csv -Path $differencesFile -NoTypeInformation
    Write-Host "Differences report saved to $differencesFile" -ForegroundColor Green
    
    $missingInFile1File = "hash_comparison_report_missing_in_file1.csv"
    $missingInFile1 | Export-Csv -Path $missingInFile1File -NoTypeInformation
    Write-Host "Missing in file1 report saved to $missingInFile1File" -ForegroundColor Green
    
    $missingInFile2File = "hash_comparison_report_missing_in_file2.csv"
    $missingInFile2 | Export-Csv -Path $missingInFile2File -NoTypeInformation
    Write-Host "Missing in file2 report saved to $missingInFile2File" -ForegroundColor Green
}